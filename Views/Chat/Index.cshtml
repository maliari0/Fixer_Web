@{
    ViewData["Title"] = "Bilgisayar Destek Asistanƒ±";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Bilgisayar Destek Asistanƒ±</h5>
                </div>
                <div class="card-body">
                    <div id="chat-messages" class="mb-3" style="height: 400px; overflow-y: auto;">
                        <div class="system-message">
                            Merhaba! Ben sizin bilgisayar destek asistanƒ±nƒ±zƒ±m. Size nasƒ±l yardƒ±mcƒ± olabilirim?
                        </div>
                    </div>
                    <div class="chat-input-area">
                        <div class="input-group">
                            <select id="category" class="form-select" style="max-width: 150px;">
                                <option value="Hardware">Donanƒ±m</option>
                                <option value="Software">Yazƒ±lƒ±m</option>
                                <option value="Network">Aƒü</option>
                                <option value="Other">Diƒüer</option>
                            </select>
                            <select id="os" class="form-select" style="max-width: 150px;">
                                <option value="Windows">Windows</option>
                                <option value="MacOS">MacOS</option>
                                <option value="Linux">Linux</option>
                                <option value="Other">Diƒüer</option>
                            </select>
                            <input type="text" id="user-input" class="form-control" placeholder="Sorunuzu yazƒ±n...">
                            <button id="send-button" class="btn btn-primary">
                                <i class="fas fa-paper-plane"></i> G√∂nder
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .chat-message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 10px;
        }

        .user-message {
            background-color: #e3f2fd;
            margin-left: 20%;
            margin-right: 5px;
        }

        .ai-message {
            background-color: #f5f5f5;
            margin-right: 20%;
            margin-left: 5px;
            white-space: pre-line;
        }

        .system-message {
            background-color: #fff3cd;
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 15px;
        }

        .typing-indicator {
            padding: 10px;
            background-color: #f5f5f5;
            border-radius: 10px;
            margin-right: 20%;
            margin-left: 5px;
            display: none;
        }

        .solution-feedback {
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid #dee2e6;
        }

        .emoji-section {
            font-weight: bold;
            color: #0d6efd;
            margin-top: 10px;
        }

        .solution-step {
            margin: 5px 0;
            padding: 5px 0;
        }

        .feedback-buttons {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .feedback-button {
            padding: 5px 15px;
            border-radius: 20px;
            border: 1px solid #dee2e6;
            background: white;
            transition: all 0.3s;
        }

        .feedback-button:hover {
            background: #e9ecef;
        }

        .feedback-button.selected {
            background: #0d6efd;
            color: white;
            border-color: #0d6efd;
        }

        .solution-container {
            margin: 15px 0;
            padding: 15px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            background-color: #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .solution-content {
            margin-bottom: 10px;
            white-space: pre-line;
            line-height: 1.6;
        }

        .vote-button {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            padding: 6px 12px;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 14px;
        }

        .vote-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .vote-button.upvote {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }

        .vote-button.downvote {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }

        .vote-button.upvote:hover:not(:disabled) {
            background-color: rgba(40, 167, 69, 0.2);
        }

        .vote-button.downvote:hover:not(:disabled) {
            background-color: rgba(220, 53, 69, 0.2);
        }

        .vote-button.active {
            font-weight: bold;
        }

        .vote-count {
            font-weight: 500;
            min-width: 20px;
            text-align: center;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            const chatMessages = $('#chat-messages');
            const userInput = $('#user-input');
            const sendButton = $('#send-button');
            const category = $('#category');
            const os = $('#os');
            let lastUserMessage = '';

            // Debug i√ßin
            console.log('Elements:', {
                chatMessages: chatMessages.length,
                userInput: userInput.length,
                sendButton: sendButton.length,
                category: category.length,
                os: os.length
            });

            async function sendMessage(isRetry = false) {
                const message = isRetry ? lastUserMessage : userInput.val().trim();
                if (!message) return;

                console.log('Sending message:', message); // Debug i√ßin

                if (!isRetry) {
                    lastUserMessage = message;
                    addMessage(message, true);
                    userInput.val('');
                }

                const indicator = showTypingIndicator();

                try {
                    const response = await $.ajax({
                        url: '@Url.Action("GetResponse", "Chat")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            problemDescription: message,
                            category: category.val(),
                            operatingSystem: os.val()
                        })
                    });

                    console.log('AI Response:', response); // Debug i√ßin

                    indicator.remove();

                    if (response.success) {
                        const messageId = Date.now();
                        addMessage(response.response, false, messageId);
                    } else {
                        addMessage('√úzg√ºn√ºm, bir hata olu≈ütu: ' + response.message);
                    }
                } catch (error) {
                    console.error('Error:', error); // Debug i√ßin
                    indicator.remove();
                    addMessage('√úzg√ºn√ºm, bir hata olu≈ütu. L√ºtfen tekrar deneyin.');
                }
            }

            // Click event handler
            sendButton.on('click', function() {
                console.log('Send button clicked'); // Debug i√ßin
                sendMessage();
            });

            // Enter key event handler
            userInput.on('keypress', function(e) {
                if (e.which === 13) {
                    console.log('Enter key pressed'); // Debug i√ßin
                    sendMessage();
                }
            });

            function formatAIResponse(response, messageId) {
                const sections = response.split(/üîç|üìù|‚ö†Ô∏è/);
                let formattedHtml = '';

                // Sorun analizi
                if (sections[1]) {
                    formattedHtml += `<div class="analysis-section">
                        <div class="emoji-section">üîç SORUN ANALƒ∞Zƒ∞</div>
                        ${sections[1]}
                    </div>`;
                }

                // √á√∂z√ºm √∂nerileri
                if (sections[2]) {
                    formattedHtml += `<div class="solutions-section">
                        <div class="emoji-section">üìù √á√ñZ√úM √ñNERƒ∞LERƒ∞</div>`;
                    
                    // ### ile ayrƒ±lmƒ±≈ü √ß√∂z√ºmleri bul
                    const solutions = sections[2].split('###').map(s => s.trim()).filter(s => s);
                    
                    solutions.forEach((solution, index) => {
                        if (solution) {
                            formattedHtml += `
                            <div class="solution-container" id="solution-${messageId}-${index}">
                                <div class="solution-content">${solution}</div>
                                <div class="solution-feedback">
                                    <div class="vote-buttons-container">
                                        <button class="vote-button upvote" onclick="voteSolution('${messageId}', ${index}, true)" title="Bu √ß√∂z√ºm i≈üe yaradƒ±">
                                            <i class="fas fa-arrow-up"></i>
                                            <span class="vote-count" id="upvote-${messageId}-${index}">0</span>
                                        </button>
                                        <button class="vote-button downvote" onclick="voteSolution('${messageId}', ${index}, false)" title="Bu √ß√∂z√ºm i≈üe yaramadƒ±">
                                            <i class="fas fa-arrow-down"></i>
                                            <span class="vote-count" id="downvote-${messageId}-${index}">0</span>
                                        </button>
                                    </div>
                                </div>
                            </div>`;
                        }
                    });
                    
                    formattedHtml += '</div>';
                }

                // G√ºvenlik uyarƒ±larƒ±
                if (sections[3]) {
                    formattedHtml += `<div class="warnings-section">
                        <div class="emoji-section">‚ö†Ô∏è G√úVENLƒ∞K UYARILARI</div>
                        ${sections[3]}
                    </div>`;
                }

                return formattedHtml;
            }

            function addMessage(message, isUser = false, messageId = null) {
                const messageDiv = $('<div>')
                    .addClass('chat-message')
                    .addClass(isUser ? 'user-message' : 'ai-message');

                if (isUser) {
                    messageDiv.text(message);
                } else {
                    messageDiv.html(formatAIResponse(message, messageId));
                }

                chatMessages.append(messageDiv);
                chatMessages.scrollTop(chatMessages[0].scrollHeight);
            }

            function showTypingIndicator() {
                const indicator = $('<div>')
                    .addClass('typing-indicator')
                    .text('AI yazƒ±yor...');
                chatMessages.append(indicator);
                indicator.show();
                chatMessages.scrollTop(chatMessages[0].scrollHeight);
                return indicator;
            }

            // Geri bildirim fonksiyonu
            async function provideFeedback(messageId, solutionIndex, isSuccessful) {
                try {
                    const response = await $.ajax({
                        url: '@Url.Action("SaveFeedback", "Chat")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            messageId: messageId,
                            solutionIndex: solutionIndex,
                            isSuccessful: isSuccessful,
                            problemDescription: lastUserMessage,
                            category: $('#category').val(),
                            operatingSystem: $('#os').val()
                        })
                    });

                    if (response.success) {
                        // T√ºm butonlarƒ± devre dƒ±≈üƒ± bƒ±rak
                        $(`#solution-${messageId}-${solutionIndex} .feedback-button`).prop('disabled', true);
                        
                        // Se√ßilen √ß√∂z√ºm√º vurgula
                        if (isSuccessful) {
                            $(`#solution-${messageId}-${solutionIndex}`).addClass('successful-solution');
                            // Diƒüer √ß√∂z√ºmleri gizle veya soldur
                            $(`.solution-container:not(#solution-${messageId}-${solutionIndex})`).addClass('faded-solution');
                        }
                    }
                } catch (error) {
                    console.error('Feedback error:', error);
                }
            }

            async function voteSolution(messageId, solutionIndex, isUpvote) {
                try {
                    console.log('Voting:', { messageId, solutionIndex, isUpvote }); // Debug i√ßin

                    const button = $(`#solution-${messageId}-${solutionIndex} .vote-button.${isUpvote ? 'upvote' : 'downvote'}`);
                    
                    // Butonu devre dƒ±≈üƒ± bƒ±rak
                    button.prop('disabled', true);

                    const response = await $.ajax({
                        url: '@Url.Action("SaveVote", "Chat")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            messageId: messageId,
                            solutionIndex: solutionIndex,
                            isUpvote: isUpvote
                        })
                    });

                    console.log('Vote response:', response); // Debug i√ßin

                    if (response.success) {
                        // Toastr bildirimi g√∂ster
                        toastr.success(isUpvote ? 'Te≈üekk√ºrler! Bu √ß√∂z√ºm√º faydalƒ± buldunuz.' : 'Te≈üekk√ºrler! Geri bildiriminiz alƒ±ndƒ±.');

                        // Oy sayƒ±sƒ±nƒ± g√ºncelle
                        const voteCountElement = $(`#${isUpvote ? 'upvote' : 'downvote'}-${messageId}-${solutionIndex}`);
                        const currentCount = parseInt(voteCountElement.text() || '0');
                        voteCountElement.text(currentCount + 1);

                        // Butonu aktif et ve stil uygula
                        button.addClass('active');
                    } else {
                        toastr.warning(response.message || 'Oy verme i≈ülemi ba≈üarƒ±sƒ±z oldu.');
                    }
                } catch (error) {
                    console.error('Vote error:', error);
                    toastr.error('Bir hata olu≈ütu. L√ºtfen tekrar deneyin.');
                } finally {
                    // Butonu tekrar aktif et
                    button.prop('disabled', false);
                }
            }

            // Debug i√ßin log ekleyelim
            $(document).ajaxError(function(event, jqXHR, ajaxSettings, thrownError) {
                console.log('Ajax Error:', {
                    status: jqXHR.status,
                    statusText: jqXHR.statusText,
                    responseText: jqXHR.responseText,
                    error: thrownError
                });
            });
        });
    </script>
} 