@{
    ViewData["Title"] = "Bilgisayar Destek Asistanƒ±";
}

<div class="chat-container">
    <div id="chat-messages" class="chat-messages"></div>
    
    <div class="chat-input-area">
        <div class="input-group">
            <select id="category" class="form-select" style="max-width: 150px;">
                <option value="Hardware">Donanƒ±m</option>
                <option value="Software">Yazƒ±lƒ±m</option>
                <option value="Network">Aƒü</option>
                <option value="Other">Diƒüer</option>
            </select>
            
            <select id="os" class="form-select" style="max-width: 150px;">
                <option value="Windows">Windows</option>
                <option value="MacOS">MacOS</option>
                <option value="Linux">Linux</option>
                <option value="Other">Diƒüer</option>
            </select>
            
            <input type="text" id="user-input" class="form-control" placeholder="Sorunuzu yazƒ±n...">
            
            <button id="send-button" class="btn btn-primary">
                <i class="fas fa-paper-plane"></i> G√∂nder
            </button>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .chat-container {
            height: 80vh;
            display: flex;
            flex-direction: column;
        }

        .chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            padding: 20px;
            background: #f8f9fa;
        }

        .chat-input-area {
            padding: 20px;
            background: white;
            border-top: 1px solid #dee2e6;
        }

        .message {
            margin-bottom: 15px;
            padding: 10px 15px;
            border-radius: 10px;
            max-width: 80%;
        }

        .user-message {
            background: #007bff;
            color: white;
            margin-left: auto;
        }

        .ai-message {
            background: white;
            border: 1px solid #dee2e6;
        }

        .typing-indicator {
            color: #6c757d;
            font-style: italic;
        }
    </style>
}

@section Scripts {
    <script>
        let lastUserMessage = '';

        $(document).ready(function () {
            const chatMessages = $('#chat-messages');
            const userInput = $('#user-input');
            const sendButton = $('#send-button');
            const category = $('#category');
            const os = $('#os');

            const welcomeMessage = "Merhaba! üëã Size nasƒ±l yardƒ±mcƒ± olabilirim?";
            addMessage(welcomeMessage, false);

            // G√∂nder butonu click event'i
            sendButton.on('click', function() {
                console.log('Send button clicked');
                sendMessage();
            });

            // Enter tu≈üu event'i
            userInput.on('keypress', function(e) {
                if (e.which === 13) {
                    console.log('Enter key pressed');
                    sendMessage();
                }
            });

            async function sendMessage(isRetry = false) {
                const message = userInput.val().trim();
                if (!message) return;

                console.log('Sending message:', message);
                lastUserMessage = message;

                if (!isRetry) {
                    addMessage(message, true);
                    userInput.val('');
                }

                const indicator = showTypingIndicator();

                try {
                    const response = await $.ajax({
                        url: '@Url.Action("GetResponse", "Chat")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            problemDescription: message,
                            category: category.val(),
                            operatingSystem: os.val()
                        })
                    });

                    console.log('AI Response:', response);
                    indicator.remove();

                    if (response.success) {
                        const messageId = Date.now();
                        addMessage(response.response, false, messageId);
                    } else {
                        addMessage('√úzg√ºn√ºm, bir hata olu≈ütu: ' + response.message, false);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    indicator.remove();
                    addMessage('√úzg√ºn√ºm, bir hata olu≈ütu. L√ºtfen tekrar deneyin.', false);
                }
            }

            function addMessage(message, isUser, messageId = null) {
                const messageDiv = $('<div></div>')
                    .addClass('message')
                    .addClass(isUser ? 'user-message' : 'ai-message');

                if (!isUser && !messageId) {
                    messageDiv.text(message);
                } else {
                    messageDiv.html(isUser ? message : formatAIResponse(message, messageId));
                }

                chatMessages.append(messageDiv);
                chatMessages.scrollTop(chatMessages[0].scrollHeight);
            }

            function showTypingIndicator() {
                const indicator = $('<div class="message ai-message typing-indicator">AI yanƒ±t yazƒ±yor...</div>');
                chatMessages.append(indicator);
                chatMessages.scrollTop(chatMessages[0].scrollHeight);
                return indicator;
            }

            // Vote butonlarƒ± i√ßin event delegation
            $(document).on('click', '.vote-button', async function(e) {
                e.preventDefault();
                
                const clickedButton = $(this);
                const container = clickedButton.closest('.solution-container');
                const messageId = container.data('message-id');
                const solutionIndex = container.data('solution-index');
                const isUpvote = clickedButton.hasClass('upvote');
                
                await handleVote(clickedButton, messageId, solutionIndex, isUpvote);
            });

            async function handleVote(clickedButton, messageId, solutionIndex, isUpvote) {
                try {
                    clickedButton.prop('disabled', true);
                    
                    const container = clickedButton.closest('.solution-container');
                    const solutionText = container.find('.solution-content').text().trim();
                    const category = $('#category').val();
                    const operatingSystem = $('#os').val();

                    const voteData = {
                        messageId: messageId.toString(),
                        solutionIndex: solutionIndex,
                        isUpvote: isUpvote,
                        problemDescription: lastUserMessage,
                        category: category,
                        operatingSystem: operatingSystem,
                        solutionText: solutionText
                    };

                    console.log('Vote Data:', voteData);

                    const response = await $.ajax({
                        url: '@Url.Action("SaveVote", "Chat")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(voteData)
                    });

                    console.log('Vote Response:', response);

                    if (response.success) {
                        toastr.success(response.message);
                        
                        container.find('.upvote .vote-count').text(response.upvotes);
                        container.find('.downvote .vote-count').text(response.downvotes);

                        container.find('.vote-button').removeClass('active');
                        clickedButton.addClass('active');
                    } else {
                        toastr.error(response.message || 'Oy verme i≈ülemi ba≈üarƒ±sƒ±z oldu.');
                    }
                } catch (error) {
                    console.error('Vote error:', error);
                    toastr.error('Bir hata olu≈ütu. L√ºtfen tekrar deneyin.');
                } finally {
                    clickedButton.prop('disabled', false);
                }
            }

            function formatAIResponse(response, messageId) {
                const sections = response.split(/üîç|üìù|‚ö†Ô∏è/);
                let formattedHtml = '';

                // Sorun analizi
                if (sections[1]) {
                    formattedHtml += `<div class="analysis-section">
                        <div class="emoji-section">üîç SORUN ANALƒ∞Zƒ∞</div>
                        ${sections[1]}
                    </div>`;
                }

                // √á√∂z√ºm √∂nerileri
                if (sections[2]) {
                    formattedHtml += `<div class="solutions-section">
                        <div class="emoji-section">üìù √á√ñZ√úM √ñNERƒ∞LERƒ∞</div>`;
                    
                    const solutions = sections[2].split('###').filter(s => s.trim());
                    
                    solutions.forEach((solution, index) => {
                        if (solution.trim()) {
                            formattedHtml += `
                            <div class="solution-container" id="solution-${messageId}-${index}" 
                                 data-message-id="${messageId}" 
                                 data-solution-index="${index}">
                                <div class="solution-content">${solution.trim()}</div>
                                <div class="solution-feedback">
                                    <div class="vote-buttons-container">
                                        <button type="button" class="vote-button upvote">
                                            <i class="fas fa-arrow-up"></i>
                                            <span class="vote-count" id="upvote-${messageId}-${index}">0</span>
                                        </button>
                                        <button type="button" class="vote-button downvote">
                                            <i class="fas fa-arrow-down"></i>
                                            <span class="vote-count" id="downvote-${messageId}-${index}">0</span>
                                        </button>
                                    </div>
                                </div>
                            </div>`;
                        }
                    });
                    
                    formattedHtml += '</div>';
                }

                // G√ºvenlik uyarƒ±larƒ±
                if (sections[3]) {
                    formattedHtml += `<div class="warnings-section">
                        <div class="emoji-section">‚ö†Ô∏è G√úVENLƒ∞K UYARILARI</div>
                        ${sections[3]}
                    </div>`;
                }

                return formattedHtml;
            }
        });
    </script>
} 