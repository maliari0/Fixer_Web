@{
    ViewData["Title"] = "Bilgisayar Destek Asistanı";
}

<div class="chat-container">
    <div id="chat-messages" class="chat-messages"></div>
    
    <div class="chat-input-area">
        <div class="input-group">
            <select id="category" class="form-select" style="max-width: 150px;">
                <option value="Hardware">Donanım</option>
                <option value="Software">Yazılım</option>
                <option value="Network">Ağ</option>
                <option value="Other">Diğer</option>
            </select>
            
            <select id="os" class="form-select" style="max-width: 150px;">
                <option value="Windows">Windows</option>
                <option value="MacOS">MacOS</option>
                <option value="Linux">Linux</option>
                <option value="Other">Diğer</option>
            </select>
            
            <input type="text" id="user-input" class="form-control" placeholder="Sorunuzu yazın...">
            
            <button id="send-button" class="btn btn-primary">
                <i class="fas fa-paper-plane"></i> Gönder
            </button>
        </div>
    </div>
</div>

@section Styles {
    <style>
        :root {
            --primary-color: #4a90e2;
            --secondary-color: #5cb85c;
            --accent-color: #f39c12;
            --background-color: #f5f7fa;
            --text-color: #2c3e50;
            --border-color: #e1e8ed;
        }

        body {
            background-color: var(--background-color);
            color: var(--text-color);
        }

        .chat-container {
            height: 85vh;
            display: flex;
            flex-direction: column;
            background: #ffffff;
            border-radius: 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            margin: 20px auto;
            max-width: 1200px;
            border: 1px solid var(--border-color);
        }

        .chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            padding: 30px;
            background: #ffffff;
            border-radius: 20px 20px 0 0;
        }

        .chat-input-area {
            padding: 25px;
            background: linear-gradient(to bottom, #ffffff, #f8f9fa);
            border-top: 1px solid var(--border-color);
            border-radius: 0 0 20px 20px;
        }

        .message {
            margin-bottom: 25px;
            padding: 18px;
            border-radius: 15px;
            max-width: 85%;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            line-height: 1.5;
        }

        .user-message {
            background: linear-gradient(135deg, var(--primary-color), #357abd);
            color: white;
            margin-left: auto;
            position: relative;
        }

        .ai-message {
            background: #f8f9fa;
            border: 1px solid var(--border-color);
            position: relative;
        }

        .top-solution {
            background: linear-gradient(to right, #f0f9ff, #ffffff);
            border-left: 4px solid var(--secondary-color);
            margin: 25px 0;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 3px 15px rgba(92,184,92,0.1);
        }

        .regular-solution {
            background-color: #ffffff;
            border: 1px solid var(--border-color);
            margin: 20px 0;
            padding: 25px;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

        .regular-solution:hover {
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            transform: translateY(-2px);
        }

        .vote-buttons-container {
            display: flex;
            gap: 15px;
            margin-top: 20px;
            justify-content: flex-end;
        }

        .vote-button {
            display: flex;
            align-items: center;
            padding: 10px 20px;
            border: none;
            border-radius: 25px;
            background: #ffffff;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .vote-button.upvote {
            color: var(--secondary-color);
        }

        .vote-button.downvote {
            color: #dc3545;
        }

        .vote-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .vote-button.active {
            background: var(--secondary-color);
            color: white;
        }

        .emoji-section {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid var(--border-color);
            font-size: 1.1em;
        }

        .analysis-section {
            background: linear-gradient(to right, #fff, #f8f9fa);
            margin: 25px 0;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .solutions-section {
            background: #ffffff;
            margin: 25px 0;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .warnings-section {
            background: linear-gradient(to right, #fff3cd, #fff9e6);
            border: 1px solid #ffeeba;
            color: #856404;
            margin: 25px 0;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(255,238,186,0.5);
        }

        .input-group {
            background: #ffffff;
            border-radius: 30px;
            padding: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }

        .form-select, .form-control {
            border-radius: 25px;
            border: 1px solid var(--border-color);
            padding: 12px 20px;
            font-size: 1em;
        }

        .form-select:focus, .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(74,144,226,0.25);
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), #357abd);
            border: none;
            border-radius: 25px;
            padding: 12px 25px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        /* Scrollbar stilleri */
        .chat-messages::-webkit-scrollbar {
            width: 10px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: #f5f5f5;
            border-radius: 5px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: linear-gradient(var(--primary-color), #357abd);
            border-radius: 5px;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(#357abd, var(--primary-color));
        }

        /* Özel başlık stili */
        .top-solution::before {
            content: "-BENZER SORUNU YAŞAYAN KULLANICILAR BU ÇÖZÜMÜ SEÇTİ-";
            display: block;
            font-weight: 600;
            color: var(--secondary-color);
            margin-bottom: 15px;
            font-size: 0.9em;
            letter-spacing: 1px;
            text-align: center;
            background: rgba(92,184,92,0.1);
            padding: 8px;
            border-radius: 8px;
        }
    </style>
}

@section Scripts {
    <script>
        let lastUserMessage = '';

        $(document).ready(function () {
            const chatMessages = $('#chat-messages');
            const userInput = $('#user-input');
            const sendButton = $('#send-button');
            const category = $('#category');
            const os = $('#os');

            const welcomeMessage = "Merhaba! 👋 Size nasıl yardımcı olabilirim?";
            addMessage(welcomeMessage, false);

            // Gönder butonu click event'i
            sendButton.on('click', function() {
                console.log('Send button clicked');
                sendMessage();
            });

            // Enter tuşu event'i
            userInput.on('keypress', function(e) {
                if (e.which === 13) {
                    console.log('Enter key pressed');
                    sendMessage();
                }
            });

            async function sendMessage(isRetry = false) {
                const message = userInput.val().trim();
                if (!message) return;

                console.log('Sending message:', message);
                lastUserMessage = message;

                if (!isRetry) {
                    addMessage(message, true);
                    userInput.val('');
                }

                const indicator = showTypingIndicator();

                try {
                    const response = await $.ajax({
                        url: '@Url.Action("GetResponse", "Chat")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            problemDescription: message,
                            category: category.val(),
                            operatingSystem: os.val()
                        })
                    });

                    console.log('AI Response:', response);
                    indicator.remove();

                    if (response.success) {
                        const messageId = Date.now();
                        addMessage(response.response, false, messageId);
                    } else {
                        addMessage('Üzgünüm, bir hata oluştu: ' + response.message, false);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    indicator.remove();
                    addMessage('Üzgünüm, bir hata oluştu. Lütfen tekrar deneyin.', false);
                }
            }

            function addMessage(message, isUser, messageId = null) {
                const messageDiv = $('<div></div>')
                    .addClass('message')
                    .addClass(isUser ? 'user-message' : 'ai-message');

                if (!isUser && !messageId) {
                    messageDiv.text(message);
                } else {
                    messageDiv.html(isUser ? message : formatAIResponse(message, messageId));
                }

                chatMessages.append(messageDiv);
                chatMessages.scrollTop(chatMessages[0].scrollHeight);
            }

            function showTypingIndicator() {
                const indicator = $('<div class="message ai-message typing-indicator">AI yanıt yazıyor...</div>');
                chatMessages.append(indicator);
                chatMessages.scrollTop(chatMessages[0].scrollHeight);
                return indicator;
            }

            function updateVoteCounts(solutionIndex, upvotes, downvotes) {
                const solutionElement = document.querySelector(`[data-solution-index="${solutionIndex}"]`);
                if (solutionElement) {
                    const voteCountsElement = solutionElement.querySelector('.vote-counts');
                    if (voteCountsElement) {
                        voteCountsElement.innerHTML = `👍 ${upvotes} | 👎 ${downvotes}`;
                    }
                }
            }

            // Vote butonları için event delegation
            $(document).on('click', '.vote-button', async function(e) {
                e.preventDefault();
                
                const clickedButton = $(this);
                const container = clickedButton.closest('.solution-container');
                const messageId = container.data('message-id');
                const solutionIndex = container.data('solution-index');
                const isUpvote = clickedButton.hasClass('upvote');
                
                await handleVote(clickedButton, messageId, solutionIndex, isUpvote);
            });

            async function handleVote(clickedButton, messageId, solutionIndex, isUpvote) {
                try {
                    clickedButton.prop('disabled', true);
                    
                    const container = clickedButton.closest('.solution-container');
                    const solutionText = container.find('.solution-content').text().trim();
                    const category = $('#category').val();
                    const operatingSystem = $('#os').val();

                    const voteData = {
                        messageId: messageId.toString(),
                        solutionIndex: solutionIndex,
                        isUpvote: isUpvote,
                        problemDescription: lastUserMessage,
                        category: category,
                        operatingSystem: operatingSystem,
                        solutionText: solutionText
                    };

                    console.log('Vote Data:', voteData);

                    const response = await $.ajax({
                        url: '@Url.Action("SaveVote", "Chat")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(voteData)
                    });

                    console.log('Vote Response:', response);

                    if (response.success) {
                        toastr.success(response.message);
                        
                        // Vote count'ları güncelle
                        container.find('.upvote .vote-count').text(response.upvotes);
                        container.find('.downvote .vote-count').text(response.downvotes);

                        // Aktif buton stilini güncelle
                        container.find('.vote-button').removeClass('active');
                        clickedButton.addClass('active');
                    } else {
                        toastr.error(response.message || 'Oy verme işlemi başarısız oldu.');
                    }
                } catch (error) {
                    console.error('Vote error:', error);
                    toastr.error('Bir hata oluştu. Lütfen tekrar deneyin.');
                } finally {
                    clickedButton.prop('disabled', false);
                }
            }

            function formatAIResponse(response, messageId) {
                const sections = response.split(/🔍|📝|⚠️/);
                let formattedHtml = '';

                if (sections[1]) {
                    formattedHtml += `<div class="analysis-section">
                        <div class="emoji-section">🔍 SORUN ANALİZİ</div>
                        ${sections[1]}
                    </div>`;
                }

                if (sections[2]) {
                    formattedHtml += `<div class="solutions-section">
                        <div class="emoji-section">📝 ÇÖZÜM ÖNERİLERİ</div>`;
                    
                    const solutions = sections[2].split('###').filter(s => s.trim());
                    
                    solutions.forEach((solution, index) => {
                        if (solution.trim()) {
                            const isTopSolution = solution.includes('-BENZER SORUNU YAŞAYAN KULLANICILAR BU ÇÖZÜMÜ SEÇTİ-');
                            const solutionClass = isTopSolution ? 'top-solution' : 'regular-solution';
                            
                            formattedHtml += `
                            <div class="solution-container ${solutionClass}" 
                                 id="solution-${messageId}-${index}" 
                                 data-message-id="${messageId}" 
                                 data-solution-index="${index}">
                                <div class="solution-content">${solution.trim()}</div>
                                <div class="solution-feedback">
                                    <div class="vote-buttons-container">
                                        <button type="button" class="vote-button upvote">
                                            <i class="fas fa-arrow-up"></i>
                                        </button>
                                        <button type="button" class="vote-button downvote">
                                            <i class="fas fa-arrow-down"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>`;
                        }
                    });
                    
                    formattedHtml += '</div>';
                }

                if (sections[3]) {
                    formattedHtml += `<div class="warnings-section">
                        <div class="emoji-section">⚠️ GÜVENLİK UYARILARI</div>
                        ${sections[3]}
                    </div>`;
                }

                return formattedHtml;
            }
        });
    </script>
} 